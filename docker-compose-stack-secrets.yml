version: "3.7"

services:

  quiz-service:
    image: razvanalexandrunicu/proiectcc:quiz
    ports:
      - 2468:2468
    environment:
      PGHOST: postgres_db
      PGPORT: 5432
      PGDATABASE: quiz
      NODE_ENV: production
      PORT: 2468
      AMQPURL: amqp://rabbitmq
    restart: on-failure
    secrets:
      - user-secret
      - password-secret
    deploy:
      replicas: 2
      update_config:
        order: start-first
      rollback_config:
        order: stop-first
    networks:
      - quiz
      - rabbitnet
      - database
    depends_on:
      - rabbitmq


  my-ioservice:
    image: razvanalexandrunicu/proiectcc:ioservice
    environment:
      PGHOST: postgres_db
      PGPORT: 5432
      PGDATABASE: quiz
      NODE_ENV: production
      AMQPURL: amqp://rabbitmq
    restart: on-failure
    secrets:
      - user-secret
      - password-secret
    networks:
      - quiz
      - database
      - rabbitnet
    depends_on:
      - rabbitmq

  rabbitmq:
    image: rabbitmq:3
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - rabbitnet

  adminer:
    image: adminer:4.7
    ports:
      - 8080:8080
    networks:
      - database-admin

  postgres_db:
    image: postgres:12
    environment:
      POSTGRES_USER_FILE: /run/secrets/user-secret
      POSTGRES_PASSWORD_FILE: /run/secrets/password-secret
      POSTGRES_DB: quiz
      TZ: Europe/Bucharest
      PGTZ: Europe/Bucharest
    secrets:
      - user-secret
      - password-secret
    ports:
      - 5432:5432
    deploy:
      placement:
        constraints: [ node.role == manager ]
    volumes:
      - db-volume:/var/lib/postgresql/data
      - ./Database/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    networks:
      - database-admin
      - database

  agent:
    image: portainer/agent
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - agent_network
    deploy:
      mode: global
      placement:
        constraints: [ node.platform.os == linux ]

  portainer:
    image: portainer/portainer-ce
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    ports:
      - "9005:9000"
      - "8005:8000"
    volumes:
      - portainer_data:/data
    networks:
      - agent_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [ node.role == manager ]

volumes:
  db-volume:
  portainer_data:

secrets:
  user-secret:
    external: true
  password-secret:
    external: true


networks:
  database-admin:
  database:
  internal:
  quiz:
  rabbitnet:
  agent_network:
